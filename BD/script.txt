-- Crear base de datos
CREATE DATABASE control_asistencia;
GO

USE control_asistencia;
GO

-- Tabla de regiones
CREATE TABLE regiones (
    id_region INT PRIMARY KEY IDENTITY(1,1),
    nombre VARCHAR(100) UNIQUE NOT NULL,
    descripcion VARCHAR(MAX),
    cantidad_sucursales INT DEFAULT 0
);

-- Tabla de sucursales
CREATE TABLE sucursales (
    id_sucursal INT PRIMARY KEY IDENTITY(1,1),
    id_region INT NOT NULL,
    nombre VARCHAR(100) UNIQUE NOT NULL,
    direccion VARCHAR(MAX) NOT NULL,
    cantidad_oficinas INT DEFAULT 0,
    telefono VARCHAR(15) CHECK (telefono LIKE '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'),
    FOREIGN KEY (id_region) REFERENCES regiones(id_region) ON DELETE CASCADE
);

-- Tabla de oficinas
CREATE TABLE oficinas (
    id_oficina INT PRIMARY KEY IDENTITY(1,1),
    id_sucursal INT NOT NULL,
    nombre VARCHAR(100) NOT NULL,
    FOREIGN KEY (id_sucursal) REFERENCES sucursales(id_sucursal) ON DELETE CASCADE
);

-- Tabla de departamentos
CREATE TABLE departamentos (
    id_departamento INT PRIMARY KEY IDENTITY(1,1),
    nombre VARCHAR(100) UNIQUE NOT NULL,
    descripcion VARCHAR(MAX)
);

-- Tabla de cargos
CREATE TABLE cargos (
    id_cargo INT PRIMARY KEY IDENTITY(1,1),
    nombre VARCHAR(100) UNIQUE NOT NULL,
    descripcion VARCHAR(MAX)
);

-- Tabla de empleados
CREATE TABLE empleados (
    id_empleado INT PRIMARY KEY IDENTITY(1,1),
    codigo VARCHAR(20) UNIQUE NOT NULL, 
    cedula VARCHAR(11) UNIQUE NOT NULL CHECK (cedula LIKE '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'),
    nombre VARCHAR(100) NOT NULL,
    apellido VARCHAR(100) NOT NULL,
    correo VARCHAR(100) UNIQUE NOT NULL,
    telefono VARCHAR(15) CHECK (telefono LIKE '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'),
    fecha_contratacion DATE NOT NULL,
    id_departamento INT,
    id_oficina INT NOT NULL,
    id_cargo INT NOT NULL,
    estado VARCHAR(10) CHECK (estado IN ('activo', 'inactivo')) DEFAULT 'activo',
    huella_biometrica VARBINARY(MAX),
    rostro_biometrico VARBINARY(MAX),
    FOREIGN KEY (id_departamento) REFERENCES departamentos(id_departamento),
    FOREIGN KEY (id_oficina) REFERENCES oficinas(id_oficina) ON DELETE CASCADE,
    FOREIGN KEY (id_cargo) REFERENCES cargos(id_cargo) ON DELETE CASCADE
);

-- Tabla de turnos
CREATE TABLE turnos (
    id_turno INT PRIMARY KEY IDENTITY(1,1),
    nombre VARCHAR(50) NOT NULL,
    hora_entrada TIME NOT NULL,
    hora_salida TIME NOT NULL,
    tolerancia_minutos INT DEFAULT 5
);

-- Relación entre empleados y turnos
CREATE TABLE empleado_turno (
    id_empleado INT,
    id_turno INT,
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE DEFAULT NULL,
    PRIMARY KEY (id_empleado, id_turno, fecha_inicio),
    FOREIGN KEY (id_empleado) REFERENCES empleados(id_empleado) ON DELETE CASCADE,
    FOREIGN KEY (id_turno) REFERENCES turnos(id_turno) ON DELETE CASCADE
);

-- Tabla de asistencias
CREATE TABLE asistencias (
    id_asistencia INT PRIMARY KEY IDENTITY(1,1),
    id_empleado INT NOT NULL,
    fecha DATE NOT NULL,
    hora_entrada TIME DEFAULT NULL,
    hora_salida TIME DEFAULT NULL,
    tipo_registro VARCHAR(10) CHECK (tipo_registro IN ('huella', 'rostro')) NOT NULL,
    estado VARCHAR(10) CHECK (estado IN ('a tiempo', 'tarde', 'ausente')) DEFAULT 'a tiempo',
    FOREIGN KEY (id_empleado) REFERENCES empleados(id_empleado) ON DELETE CASCADE
);

-- Tabla de permisos
CREATE TABLE permisos (
    id_permiso INT PRIMARY KEY IDENTITY(1,1),
    id_empleado INT NOT NULL,
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE NOT NULL,
    motivo VARCHAR(MAX) NOT NULL,
    estado VARCHAR(15) CHECK (estado IN ('pendiente', 'aprobado', 'rechazado')) DEFAULT 'pendiente',
    FOREIGN KEY (id_empleado) REFERENCES empleados(id_empleado) ON DELETE CASCADE
);

-- Historial de faltas
CREATE TABLE historial_faltas (
    id_historial INT PRIMARY KEY IDENTITY(1,1),
    id_empleado INT NOT NULL,
    cantidad_faltas INT DEFAULT 0,
    ultima_falta DATE DEFAULT NULL,
    motivo_ultima_falta VARCHAR(MAX),
    estado_disciplinario VARCHAR(15) CHECK (estado_disciplinario IN ('normal', 'advertencia', 'sancionado', 'despido')) DEFAULT 'normal',
    FOREIGN KEY (id_empleado) REFERENCES empleados(id_empleado) ON DELETE CASCADE
);

-- Tabla de usuarios
CREATE TABLE usuarios (
    id_usuario INT PRIMARY KEY IDENTITY(1,1),
    id_empleado INT UNIQUE NOT NULL,
    username VARCHAR(50) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    rol VARCHAR(20) CHECK (rol IN ('administrador', 'rrhh', 'empleado')) NOT NULL,
    FOREIGN KEY (id_empleado) REFERENCES empleados(id_empleado) ON DELETE CASCADE
);

-- Índices
CREATE INDEX idx_sucursales_id_region ON sucursales(id_region);
CREATE INDEX idx_oficinas_id_sucursal ON oficinas(id_sucursal);
CREATE INDEX idx_empleados_id_oficina ON empleados(id_oficina);
CREATE INDEX idx_empleados_id_departamento ON empleados(id_departamento);
CREATE INDEX idx_empleados_id_cargo ON empleados(id_cargo);
CREATE INDEX idx_empleado_turno_id_empleado ON empleado_turno(id_empleado);
CREATE INDEX idx_empleado_turno_id_turno ON empleado_turno(id_turno);
CREATE INDEX idx_asistencias_id_empleado ON asistencias(id_empleado);
CREATE INDEX idx_asistencias_fecha ON asistencias(fecha);
CREATE INDEX idx_permisos_id_empleado ON permisos(id_empleado);
CREATE INDEX idx_permisos_fecha_inicio ON permisos(fecha_inicio);
CREATE INDEX idx_historial_faltas_id_empleado ON historial_faltas(id_empleado);
CREATE INDEX idx_usuarios_username ON usuarios(username);
GO

-- Procedimientos Almacenados

 --Login_Usuario
/*
 CREATE PROCEDURE sp_login_usuario
    @username VARCHAR(50),
    @password VARCHAR(255)
AS
BEGIN
    SET NOCOUNT ON;

    IF EXISTS (
        SELECT 1
        FROM usuarios
        WHERE username = @username AND password_hash = @password
    )
    BEGIN
        SELECT 
            u.id_usuario,
            u.username,
            u.rol,
            e.nombre,
            e.apellido,
            e.estado
        FROM usuarios u
        INNER JOIN empleados e ON u.id_empleado = e.id_empleado
        WHERE u.username = @username;
    END
    ELSE
    BEGIN
        SELECT 'ERROR' AS mensaje, 'Credenciales incorrectas' AS descripcion;
    END
END;
GO
*/
 
 --Registrar_Usuario
/*
CREATE PROCEDURE sp_registrar_usuario
    @id_empleado INT,
    @username VARCHAR(50),
    @password_hash VARCHAR(255),
    @rol VARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;

    -- Validar si el username ya existe
    IF EXISTS (SELECT 1 FROM usuarios WHERE username = @username)
    BEGIN
        SELECT 'ERROR' AS mensaje, 'El nombre de usuario ya está en uso' AS descripcion;
        RETURN;
    END

    -- Validar si el empleado ya tiene un usuario asignado
    IF EXISTS (SELECT 1 FROM usuarios WHERE id_empleado = @id_empleado)
    BEGIN
        SELECT 'ERROR' AS mensaje, 'Este empleado ya tiene un usuario registrado' AS descripcion;
        RETURN;
    END

    -- Insertar el nuevo usuario
    INSERT INTO usuarios (id_empleado, username, password_hash, rol)
    VALUES (@id_empleado, @username, @password_hash, @rol);

    -- Confirmar registro
    SELECT 'OK' AS mensaje, 'Usuario registrado exitosamente' AS descripcion;
END;
GO
*/